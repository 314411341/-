
list：
files = ["f1.txt", "f2.txt", "f3.txt", "f4.txt", "f5.txt"]
print("files[0] ", files[0])
print("files[3] ", files[3])
print("files[-1] ", files[-1])
print("files[-3] ", files[-3])

print
files[0]  f1.txt
files[3]  f4.txt
files[-1]  f5.txt
files[-3]  f3.txt
在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。

dict：
files = {"ID": 111, "passport": "my passport", "books": [1,2,3]}
print(files)
print(files["books"])

print
{'ID': 111, 'passport': 'my passport', 'books': [1, 2, 3]}
[1, 2, 3]
在dict字典，相当于有了索引的list，调用非常方便，对于唯一的key有唯一的value

元组：
files = ("file1", "file2", "file3")
print(files[1])
files[1] = "file4"   # 这里会报错
元组中的元素不能被改变value

set合集：
my_files = set(["file1", "file2", "file3"])
print(my_files)
my_files.add("file3")


print(v.name)
print(v.window_size)
print(v.create_time)
print(t.create_time)
print(t.language)
print(t.get_more_info())
print(my_files)
my_files.add("file4")
print(my_files)
my_files.remove("file3")
print(my_files)

print
{'file1', 'file2', 'file3'}
{'file1', 'file2', 'file3'}
{'file1', 'file2', 'file3', 'file4'}
{'file1', 'file2', 'file4'}
set里不会出现重复元素，用来去重


pop的运用
files = []
for i in range(5):
    files.append("f"+str(i)+".txt") # 添加
    print("has", files)

for i in range(len(files)):
    print("pop", files.pop())   # 从最后一个开始 pop 出
    print("remain", files)
    
print
has ['f0.txt']
has ['f0.txt', 'f1.txt']
has ['f0.txt', 'f1.txt', 'f2.txt']
has ['f0.txt', 'f1.txt', 'f2.txt', 'f3.txt']
has ['f0.txt', 'f1.txt', 'f2.txt', 'f3.txt', 'f4.txt']
pop f4.txt
remain ['f0.txt', 'f1.txt', 'f2.txt', 'f3.txt']
pop f3.txt
remain ['f0.txt', 'f1.txt', 'f2.txt']
pop f2.txt
remain ['f0.txt', 'f1.txt']
pop f1.txt
remain ['f0.txt']
pop f0.txt
remain []
pop用法：files_name.pop()即为去掉列表最后一个元素


files = {"ID": 111, "passport": "my passport", "books": [1,2,3]}

# 按key拿取，并在拿取失败的时候给一个设定好的默认值
print('files["ID"]:', files["ID"])
print('files.get("ID"):', files.get("ID"))

# 将另一个字典补充到当前字典
files.update({"files": ["1", "2"]})
print('update:', files)

# pop 调一个item，和列表的 pop 类似
popped = files.pop("ID")
print('popped:', popped)
print("remain:", files)

print
files["ID"]: 111
files.get("ID"): 111
update: {'ID': 111, 'passport': 'my passport', 'books': [1, 2, 3], 'files': ['1', '2']}
popped: 111
remain: {'passport': 'my passport', 'books': [1, 2, 3], 'files': ['1', '2']}


继承：
class File:
    def __init__(self,name,create_time="today"):
        self.name =name
        self.create_time=create_time

    def get_info(self):
        return self.name+"is created at"+self.create_time
class Video(File):
    def __init__(self,name,window_size=(1080,720)):
        super().__init__(name=name,create_time="today")
        self.window_size=window_size
class Text(File):
    def __init__(self,name,language="zh-cn"):
        super().__init__(name=name,create_time="today")
        self.language =language
    def get_more_info(self):
        return self.get_info()+",using language fo"+self.language

v=Video("my_video")
t=Text("my_text")
print(v.get_info())
print(v.name)
print(v.window_size)
print(v.create_time)
print(t.create_time)
print(t.language)
print(t.get_more_info())

print：
my_videois created attoday
my_video
(1080, 720)
today
today
zh-cn
my_textis created attoday,using language fozh-cn

强隐藏两个下划线__  弱隐藏一个_

正则表达式
import re
match = re.search(r"run", "I run to you")
print(match)
print(match.group())

print：
<re.Match object; span=(2, 5), match='run'>
run
特定标识	含义	范围
\d	任何数字	[0-9]
\D	不是数字的	
\s	任何空白字符	[ \t\n\r\f\v]
\S	空白字符以外的	
\w	任何大小写字母,数字和 _	[a-zA-Z0-9_]
\W	\w 以外的	
\b	匹配一个单词边界	比如 er\b 可以匹配 never 中的 er，但不能匹配 verb 中的 er
\B	匹配非单词边界	比如 er\B 能匹配 verb 中的 er，但不能匹配 never 中的 er
\\	强制匹配 \	
.	匹配任何字符 (除了 \n)	
?	前面的模式可有可无	
*	重复零次或多次	
+	重复一次或多次	
{n,m}	重复 n 至 m 次	
{n}	重复 n 次	
+?	非贪婪，最小方式匹配 +	
*?	非贪婪，最小方式匹配 *	
??	非贪婪，最小方式匹配 ?	
^	匹配一行开头，在 re.M 下，每行开头都匹配	
$	匹配一行结尾，在 re.M 下，每行结尾都匹配	
\A	匹配最开始，在 re.M 下，也从文本最开始	
\B	匹配最结尾，在 re.M 下，也从文本最结尾	




功能	说明	举例
re.search()	扫描查找整个字符串，找到第一个模式匹配的	re.search(rrun, I run to you) > 'run'
re.match()	从字符的最开头匹配，找到第一个模式匹配的即使用 re.M 多行匹配，也是从最最开头开始匹配	re.match(rrun, I run to you) > None
re.findall()	返回一个不重复的 pattern 的匹配列表	re.findall(rr[ua]n, I run to you. you ran to him) > ['run', 'ran']
re.finditer()	和 findall 一样，只是用迭代器的方式使用	for item in re.finditer(rr[ua]n, I run to you. you ran to him):
re.split()	用正则分开字符串	re.split(rr[ua]n, I run to you. you ran to him) > ['I ', ' to you. you ', ' to him']
re.sub()	用正则替换字符	re.sub(rr[ua]n, jump, I run to you. you ran to him) > 'I jump to you. you jump to him'
re.subn()	和 sub 一样，额外返回一个替代次数	re.subn(rr[ua]n, jump, I run to you. you ran to him) > ('I jump to you. you jump to him', 2)
